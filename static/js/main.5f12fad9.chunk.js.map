{"version":3,"sources":["responsive/Device.js","components/ForecastHour.js","components/DailyForecasts.js","components/SearchCity.js","components/ForecastWrapper.js","components/Result.js","components/NotFound.js","components/BigLabel.js","components/App.js","serviceWorker.js","index.js"],"names":["size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","desktopL","ForecastWrapper","styled","div","WeatherIcon","img","ForecastHour","props","temp","month","day","hour","icon","iconUrl","align","src","DetailsContainer","DailyForecasts","items","forecast","map","item","key","dt","Math","floor","main","weather","dt_txt","slice","SearchInput","input","SearchCity","onSubmit","submit","value","placeholder","onChange","change","Content","ForecastDay","useState","setValue","weatherData","setWeatherData","datePosition","weatherIcon","setWeatherIcon","createDate","e","preventDefault","reverseGeocoding","process","then","coordinates","dailyForecast","lat","lng","fetch","res","json","data","daily","catch","error","console","log","target","Container","HeaderElement","ForecastContainer","Result2","today","Date","setDate","getDate","toDateString","city","NotFoundWrapper","NotfoundIcon","span","NotFoundText","NotFound","faFrown","BigLabel","h2","color","weight","fontSize","firstToUpperCase","WeatherWrapper","GMapsAPIkey","a","async","Geocode","setApiKey","Promise","resolve","reject","fromAddress","response","results","geometry","location","App","state","value2","weatherInfo","values","handleInputChange","setState","handleSearchCity","APIkey","all","res1","res2","res3","ok","Error","statusText","data1","data2","data3","currentDate","date","getDay","getMonth","sunset","sys","toLocaleTimeString","sunrise","name","country","description","highestTemp","temp_max","lowestTemp","temp_min","clouds","humidity","wind","speed","list","createDates","datesList","i","newDate","now","push","this","showResult","React","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5f12fad9.chunk.js","sourcesContent":["const size = {\r\n  mobileS: '320px',\r\n  mobileM: '375px',\r\n  mobileL: '525px',\r\n  tablet: '940px',\r\n  laptop: '1024px',\r\n  laptopL: '1440px',\r\n  desktop: '2560px',\r\n};\r\n\r\nconst device = {\r\n  mobileS: `(min-width: ${size.mobileS})`,\r\n  mobileM: `(min-width: ${size.mobileM})`,\r\n  mobileL: `(min-width: ${size.mobileL})`,\r\n  tablet: `(min-width: ${size.tablet})`,\r\n  laptop: `(min-width: ${size.laptop})`,\r\n  laptopL: `(min-width: ${size.laptopL})`,\r\n  desktop: `(min-width: ${size.desktop})`,\r\n  desktopL: `(min-width: ${size.desktop})`,\r\n};\r\n\r\nexport default device;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ForecastWrapper = styled.div`\r\n  flex: 0 0 100px;\r\n  margin: 10px;\r\n`;\r\n\r\nconst WeatherIcon = styled.img`\r\n  display: block;\r\n  height: 50px;\r\n  width: 50px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ForecastHour = props => {\r\n  const { temp, month, day, hour, icon } = props;\r\n  const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\r\n\r\n  return (\r\n    <ForecastWrapper>\r\n      <div align=\"center\">{month}.{day}</div>\r\n      <div align=\"center\">{hour}:00</div>\r\n      <WeatherIcon src={iconUrl} />\r\n      <div align=\"center\">{temp}&#176;</div>\r\n    </ForecastWrapper>\r\n  );\r\n};\r\n\r\nForecastHour.propTypes = {\r\n  temp: PropTypes.number.isRequired,\r\n  month: PropTypes.string.isRequired,\r\n  day: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  icon: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ForecastHour;\r\n","import React from 'react';\r\nimport './Result.sass';\r\nimport styled from 'styled-components';\r\nimport ForecastHour from './ForecastHour';\r\n\r\nconst DetailsContainer = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  align-content: space-between;\r\n  overflow-x: auto;\r\n`;\r\n\r\nconst DailyForecasts = (props) => {\r\n\r\n  const items = props.forecast.map(item => (\r\n    <ForecastHour\r\n      key={item.dt}\r\n      temp={Math.floor(item.main.temp * 1) / 1}\r\n      icon={item.weather[0].icon}\r\n      month={item.dt_txt.slice(5, 7)}\r\n      day={item.dt_txt.slice(8, 10)}\r\n      hour={item.dt_txt.slice(11, 13) * 1}\r\n    />\r\n  ))\r\n\r\n  return (\r\n    <DetailsContainer>\r\n      {items}\r\n    </DetailsContainer>\r\n  )\r\n};\r\n\r\nexport default DailyForecasts; ","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\n\r\nconst SearchInput = styled.input`\r\n  border: none;\r\n  background-color: #ffffff;\r\n  font-size: 13px;\r\n  padding: 10px 15px 10px 40px;\r\n  transition: 0.2s;\r\n  border-radius: 20px;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:focus {\r\n    color: #191919;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    outline: none;\r\n  }\r\n  @media ${device.tablet} {\r\n    font-size: 13px;\r\n  }\r\n  @media ${device.laptop} {\r\n    padding: 15px 20px 15px 45px;\r\n    border-radius: 30px;\r\n  }\r\n`;\r\n\r\nconst SearchCity = props => {\r\n  return (\r\n    <>\r\n        <form onSubmit={props.submit}>\r\n            <SearchInput value={props.value} placeholder=\"Enter place\" onChange={props.change}/>\r\n        </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SearchCity;\r\n","import React, {useState} from 'react';\r\nimport styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\nimport SearchCity from './SearchCity';\r\n\r\nconst ForecastWrapper = styled.div`\r\n  flex: 1 1 100%;  \r\n  margin: 10px;\r\n  padding: 20px 20px;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  border-radius: 10px;\r\n  @media ${device.tablet} {\r\n    flex: 0 0 45%;\r\n  }\r\n  @media ${device.laptopL} {\r\n    flex: 0 0 20%;\r\n  }\r\n`;\r\n\r\nconst Content = styled.div`\r\n  text-align: center;\r\n  margin: 10px;\r\n`;\r\n\r\nconst WeatherIcon = styled.img`\r\n  display: block;\r\n  height: 50px;\r\n  width: 50px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ForecastDay = (props) => {\r\n\r\n  const [value, setValue] = useState(\"\");\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [datePosition, setDatePosition] = useState(props.datePosition);\r\n  const [weatherIcon, setWeatherIcon] = useState(null)\r\n\r\n  const handleInputChange = e => {\r\n    setValue(\r\n      e.target.value,\r\n    );\r\n  };\r\n\r\n  const handleForecastSearch = e => {\r\n    e.preventDefault();\r\n    const APIkey = process.env.REACT_APP_API_KEY;\r\n    const GMapsAPIkey = process.env.REACT_APP_GMPAS_API_KEY;\r\n\r\n    props.reverseGeocoding(GMapsAPIkey, value)\r\n    .then(coordinates => {\r\n      const dailyForecast = `https://api.openweathermap.org/data/2.5/onecall?lat=${coordinates.lat}&lon=${coordinates.lng}&appid=${APIkey}&units=metric`;\r\n      fetch(dailyForecast)\r\n      .then(res => {\r\n        return res.json();\r\n      })\r\n      .then((data) => {\r\n        setWeatherData(data.daily[datePosition]);\r\n        setWeatherIcon(`https://openweathermap.org/img/w/${data.daily[datePosition].weather[0].icon}.png`);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n    }\r\n  )}    \r\n\r\n  return (\r\n      <ForecastWrapper>\r\n        <Content>\r\n          {props.createDate(datePosition)}\r\n        </Content>\r\n        <Content>\r\n          <SearchCity \r\n            submit={handleForecastSearch}\r\n            value={value}\r\n            change={handleInputChange}\r\n          />\r\n        </Content>\r\n      { weatherData && <div>\r\n        <Content>{value}</Content>\r\n        <WeatherIcon src={weatherIcon} />\r\n        <Content>{weatherData.temp.day}°</Content>\r\n      </div>}\r\n      </ForecastWrapper>\r\n  );\r\n};\r\n\r\nexport default ForecastDay;","import React from 'react';\r\nimport './Result.sass';\r\nimport styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\nimport DailyForecasts from './DailyForecasts';\r\nimport ForecastDay from './ForecastWrapper';\r\nimport SearchCity from './SearchCity';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: center;\r\n  padding: 40px 20px;\r\n  background-color: rgba(255, 255, 255, 0.5);\r\n  border-radius: 10px;\r\n  position: relative;\r\n  top: 20px;\r\n  margin: 20px;\r\n  @media ${device.mobileL} {\r\n    justify-content: space-between;\r\n  }\r\n`;\r\nconst HeaderElement = styled.div`\r\n  flex: 0 1 auto;\r\n  margin: 10px;\r\n  \r\n`;\r\n\r\nconst Content = styled.div`\r\n  display: flex;\r\n  flex-basis: 100%;\r\n  justify-content: space-between;\r\n  margin: 20px;\r\n`;\r\n\r\nconst ForecastContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  flex-direction: row;\r\n  justify-content: space-between;\r\n  padding: 40px 0;\r\n  border-radius: 10px;\r\n  position: relative;\r\n  margin: 20px;\r\n  @media ${device.tablet} {\r\n    flex-wrap: wrap;\r\n  }\r\n`;\r\n\r\nconst Result2 = (props) => {\r\n\r\n  const createDate = datePosition => {\r\n    const today = new Date();\r\n    today.setDate(today.getDate() + datePosition);\r\n    return today.toDateString();\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <HeaderElement>{createDate(0)}</HeaderElement>\r\n        <SearchCity \r\n            submit={props.submit}\r\n            value={props.value}\r\n            change={props.change}\r\n          />\r\n        <div></div>        \r\n        {props.weather &&\r\n          <Content>\r\n            <div>\r\n              {props.weather.city}\r\n            </div>\r\n            <div>\r\n              {props.weather.temp}°\r\n            </div>\r\n          </Content>}\r\n        {props.weather &&\r\n          <DailyForecasts\r\n          forecast={props.weather.forecast}\r\n        />}\r\n      </Container>\r\n      <ForecastContainer>\r\n        <ForecastDay\r\n          reverseGeocoding={props.reverseGeocoding}\r\n          datePosition={1}\r\n          createDate={createDate}\r\n        />\r\n        <ForecastDay\r\n          reverseGeocoding={props.reverseGeocoding}\r\n          datePosition={2}\r\n          createDate={createDate}\r\n        />\r\n        <ForecastDay\r\n          reverseGeocoding={props.reverseGeocoding}\r\n          datePosition={3}\r\n          createDate={createDate}\r\n        />\r\n        <ForecastDay\r\n          reverseGeocoding={props.reverseGeocoding}\r\n          datePosition={4}\r\n          createDate={createDate}\r\n        />\r\n      </ForecastContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Result2;\r\n\r\n/*\r\n\r\n*/","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faFrown } from '@fortawesome/free-solid-svg-icons';\r\nimport styled from 'styled-components';\r\n\r\nconst NotFoundWrapper = styled.div`\r\n  max-width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 100px auto 0;\r\n  padding: 20px;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  position: relative;\r\n  border-radius: 10px;\r\n  top: 20px;\r\n  background-color: rgba(255, 255, 255, 0.3);\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst NotfoundIcon = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n  color: #ffffff;\r\n  font-size: 40px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst NotFoundText = styled.span`\r\n  color: #ffffff;\r\n  font-size: 17px;\r\n`;\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <NotFoundWrapper>\r\n      <NotfoundIcon>\r\n        <FontAwesomeIcon icon={faFrown} />\r\n      </NotfoundIcon>\r\n      <NotFoundText>Sorry, the specified city was not found..</NotFoundText>\r\n    </NotFoundWrapper>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import styled from 'styled-components';\r\nimport device from '../responsive/Device';\r\n\r\nconst BigLabel = styled.h2`\r\n  color: ${({ color }) => color || '#000000'};\r\n  display: block;\r\n  font-weight: ${({ weight }) => weight || '600'};\r\n  font-size: ${({ fontSize }) => fontSize || '30px'};\r\n  text-align: ${({ align }) => align || 'left'};\r\n  padding: 5px 0;\r\n  ${({ firstToUpperCase }) =>\r\n    firstToUpperCase &&\r\n    `\r\n  &:first-letter {\r\n    text-transform: uppercase;\r\n  }\r\n  `}\r\n  @media ${device.tablet} {\r\n    font-size: ${({ fontSize }) => fontSize || '37px'};\r\n  }\r\n  @media ${device.laptop} {\r\n    font-size: ${({ fontSize }) => fontSize || '43px'};\r\n  } \r\n  @media ${device.laptopL} {\r\n    font-size: ${({ fontSize }) => fontSize || '52px'};\r\n  } \r\n`;\r\n\r\nexport default BigLabel;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Geocode from 'react-geocode';\r\nimport Result2 from './Result';\r\nimport NotFound from './NotFound';\r\nimport BigLabel from './BigLabel';\r\n\r\nconst WeatherWrapper = styled.div`\r\n  max-width: 1500px;\r\n  margin: 0 auto;\r\n  height: calc(100vh - 64px);\r\n  width: 100%;\r\n  position: relative;\r\n`;\r\n\r\nasync function reverseGeocoding(GMapsAPIkey, value){\r\n  Geocode.setApiKey(GMapsAPIkey);\r\n  //Geocode.setLanguage(\"en\");\r\n  return new Promise((resolve, reject) => {\r\n    Geocode.fromAddress(value).then(\r\n      response => {\r\n        const { lat, lng } = response.results[0].geometry.location;\r\n        resolve({lat, lng})\r\n      },\r\n      error => {\r\n        console.error(error);\r\n      });\r\n  });\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = {\r\n    value: '',\r\n    value2: '',\r\n    weatherInfo: null,\r\n    error: false,\r\n    values: []\r\n  };\r\n\r\n  handleInputChange = e => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleSearchCity = e => {\r\n    e.preventDefault();\r\n    const { value } = this.state;\r\n    const APIkey = process.env.REACT_APP_API_KEY;\r\n    const GMapsAPIkey = process.env.REACT_APP_GMPAS_API_KEY;\r\n\r\n    const weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\r\n    const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric&cnt=8`;\r\n\r\n    reverseGeocoding(GMapsAPIkey, value)\r\n    .then(coordinates => {\r\n      const dailyForecast = `https://api.openweathermap.org/data/2.5/onecall?lat=${coordinates.lat}&lon=${coordinates.lng}&appid=${APIkey}&units=metric`;\r\n      Promise.all([fetch(weather), fetch(forecast), fetch(dailyForecast)])\r\n      .then(([res1, res2, res3]) => {\r\n        if (res1.ok && res2.ok && res3.ok) {\r\n          return Promise.all([res1.json(), res2.json(), res3.json()]);\r\n        }\r\n        throw Error(res1.statusText, res2.statusText, res3.statusText);\r\n      })\r\n      .then(([data1, data2, data3]) => {\r\n        const months = [\r\n          'January',\r\n          'February',\r\n          'March',\r\n          'April',\r\n          'May',\r\n          'June',\r\n          'July',\r\n          'August',\r\n          'September',\r\n          'October',\r\n          'Nocvember',\r\n          'December',\r\n        ];\r\n        const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n        const currentDate = new Date();\r\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\r\n          months[currentDate.getMonth()]\r\n        }`;\r\n        const sunset = new Date(data1.sys.sunset * 1000).toLocaleTimeString().slice(0, 5);\r\n        const sunrise = new Date(data1.sys.sunrise * 1000).toLocaleTimeString().slice(0, 5);\r\n\r\n        const weatherInfo = {\r\n          city: data1.name,\r\n          country: data1.sys.country,\r\n          date,\r\n          description: data1.weather[0].description,\r\n          main: data1.weather[0].main,\r\n          temp: data1.main.temp,\r\n          highestTemp: data1.main.temp_max,\r\n          lowestTemp: data1.main.temp_min,\r\n          sunrise,\r\n          sunset,\r\n          clouds: data1.clouds.all,\r\n          humidity: data1.main.humidity,\r\n          wind: data1.wind.speed,\r\n          forecast: data2.list,\r\n          dailyForecast: data3.daily.slice(1, 5),\r\n        };\r\n        this.setState({\r\n          weatherInfo,\r\n          error: false,\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n\r\n        this.setState({\r\n          error: true,\r\n          weatherInfo: null,\r\n        });\r\n      });\r\n    }\r\n  )}\r\n  \r\n  componentDidMount(){\r\n    var datesList = [];\r\n    const n = 4;\r\n    for (let i = 0; i <= n; i++) {\r\n      var newDate = new Date(Date.now() + i * 24 * 60 * 60 * 1000)\r\n      datesList.push(newDate);\r\n    }\r\n    this.setState({ values: [...datesList] });\r\n  }\r\n  \r\n  createDates = () =>{\r\n    var currentDate = new Date();\r\n    \r\n    this.setState({ ...this.state, values : currentDate });\r\n    currentDate.setDate(currentDate.getDate() + 1);\r\n  }\r\n\r\n  render() {\r\n    const { value, weatherInfo, error } = this.state;\r\n    return (\r\n      <>\r\n        <BigLabel>Travel Weather App</BigLabel>\r\n        <WeatherWrapper>\r\n        <Result2\r\n            weather={weatherInfo}\r\n            value={value}\r\n            showResult={(weatherInfo || error) && true}\r\n            submit={this.handleSearchCity}\r\n            change={this.handleInputChange}\r\n            reverseGeocoding={reverseGeocoding}\r\n          />\r\n          {error && <NotFound error={error} />}\r\n        </WeatherWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.sass';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('weather-app'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}